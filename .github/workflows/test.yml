name: test

on:
  push:
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version || '3.12' }}-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version || '3.12' }}-
      - name: Install dev deps
        run: |
          python -m pip install -U pip wheel setuptools
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          python - <<'PY'
          try:
              import faker; print('Faker OK:', getattr(faker, '__version__', 'unknown'))
          except Exception as e:
              import sys; print('Faker import failed:', e); sys.exit(1)
          PY
      - name: Ruff format (check only)
        run: ruff format --check backend
      - name: Ruff lint
        run: ruff check backend
  unit:
    runs-on: ubuntu-latest
    needs: [lint]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: gym_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d gym_test"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.12-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.12-

      - name: Install dependencies
        run: |
          python -m pip install -U pip wheel setuptools
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          python - <<'PY'
          try:
              import faker; print('Faker OK:', getattr(faker, '__version__', 'unknown'))
          except Exception as e:
              import sys; print('Faker import failed:', e); sys.exit(1)
          PY

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 5433 -U postgres -d gym_test && break
            echo "Postgres not ready yet..."
            sleep 2
          done

      - name: Show tree
        run: |
          ls -la
          ls -la backend || true

      - name: Run tests
        working-directory: backend
        env:
          TEST_DATABASE_URL: postgresql+asyncpg://postgres:pass@localhost:5433/gym_test
        run: pytest -q
