name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main]

jobs:
  test:
    name: Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    # 環境変数
    env:
      # Postgres service
      POSTGRES_DB: gym_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pass
      POSTGRES_PORT: 5432

      # Test DB URL (async)
      TEST_DATABASE_URL: postgresql+asyncpg://postgres:pass@localhost:5432/gym_test

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - "5432:5432"
        # ヘルスチェック
        options: >-
          --health-cmd="pg_isready -U postgres -d gym_test"
          --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # full history for diff

      - name: Detect changed Python files (git diff)
        id: changes
        env:
          PR_BASE: ${{ github.event.pull_request.base.ref }}
        run: |
          set -euo pipefail
          BASE_REF=${PR_BASE:-main}
          git fetch --no-tags --prune --depth=1 origin "$BASE_REF"
          BASE_SHA=$(git merge-base HEAD "origin/${BASE_REF}")
          echo "BASE_REF=$BASE_REF BASE_SHA=$BASE_SHA"
          FILES=$(git diff --name-only --diff-filter=ACMR "$BASE_SHA" HEAD | grep -E '\.py$' || true)
          echo "files=$FILES" >> "$GITHUB_OUTPUT"
          if [ -n "$FILES" ]; then echo "has_py=true" >> "$GITHUB_OUTPUT"; else echo "has_py=false" >> "$GITHUB_OUTPUT"; fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Determine pip cache dir
        id: pip-cache-dir
        run: echo "dir=$(python -m pip cache dir)" >> $GITHUB_OUTPUT

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache-dir.outputs.dir }}
          key: pip-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install -U pip wheel setuptools
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Ruff lint
        run: ruff check .

      - name: Mypy type check (changed files only)
        if: steps.changes.outputs.has_py == 'true'
        run: |
          echo "Changed files:" "${{ steps.changes.outputs.files }}"
          mypy --show-error-codes ${{ steps.changes.outputs.files }}
      - name: Mypy skipped (no Python changes)
        if: steps.changes.outputs.has_py != 'true'
        run: echo "No Python changes detected; skipping mypy"

      - name: Alembic upgrade head (use sync driver)
        env:
          # migrations/env.py prefers ALEMBIC_DATABASE_URL or DATABASE_URL.
          # It will coerce +asyncpg → +psycopg2 automatically if needed.
          ALEMBIC_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        run: alembic upgrade head

      - name: Pytest with coverage
        env:
          TEST_DATABASE_URL: ${{ env.TEST_DATABASE_URL }}
        run: pytest -q --cov --cov-report=xml --cov-fail-under=70

      - name: Upload coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
